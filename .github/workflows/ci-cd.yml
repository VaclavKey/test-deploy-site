name: CI/CD

on:
  push:
    branches: "main"
  pull_request:
    branches: "main"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (optional, if your image is private)
        if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        id: docker-build-push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest

      - name: Save GitHub Actions cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Restore GitHub Actions cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: Run tests (example - you might need to adapt this)
        working-directory: ./backend
        run: |
          # Пример запуска тестов, если они у вас есть
          # python -m unittest discover -s tests
          # pytest
          echo "No tests configured yet."

  deploy:
    needs: [build, test]
    runs-on: ${{ secrets.SERVER_OS || 'ubuntu-latest' }} # Позволяет задать OS сервера как секрет
    steps:
      - name: SSH to server and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          script: |
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}
            docker-compose down
            docker-compose up -d
